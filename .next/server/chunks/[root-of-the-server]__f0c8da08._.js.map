{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/types.ts"],"sourcesContent":["import { z } from 'zod'\n\n// Employee Schema\nexport const employeeSchema = z.object({\n  id: z.string().optional(),\n  employeeId: z.string().min(1, \"Employee ID is required\"),\n  fullName: z.string().min(2, \"Full name must be at least 2 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().min(10, \"Phone number must be at least 10 digits\"),\n  department: z.string().min(1, \"Department is required\"),\n  position: z.string().min(1, \"Position is required\"),\n  salary: z.number().min(0, \"Salary must be a positive number\"),\n  joinDate: z.string().min(1, \"Join date is required\"),\n  status: z.enum(['active', 'inactive', 'on-leave']).default('active'),\n  createdAt: z.date().optional(),\n  updatedAt: z.date().optional(),\n})\n\n// Location Schema\nexport const locationSchema = z.object({\n  id: z.string().optional(),\n  employeeId: z.string().min(1, \"Employee ID is required\"),\n  latitude: z.number().min(-90).max(90, \"Invalid latitude\"),\n  longitude: z.number().min(-180).max(180, \"Invalid longitude\"),\n  address: z.string().optional(),\n  timestamp: z.string().min(1, \"Timestamp is required\"),\n  accuracy: z.number().min(0, \"Accuracy must be positive\"),\n  source: z.enum(['gps', 'manual', 'wifi']).default('gps'),\n})\n\n// TypeScript types\nexport type Employee = z.infer<typeof employeeSchema>\nexport type Location = z.infer<typeof locationSchema>\n\n// API Response types\nexport interface ApiResponse<T> {\n  data?: T\n  error?: string\n  message?: string\n}\n\nexport interface EmployeeWithLocation extends Employee {\n  currentLocation?: Location\n  locationHistory?: Location[]\n}\n\n// Form types\nexport type EmployeeFormData = Omit<Employee, 'id' | 'createdAt' | 'updatedAt'>\nexport type LocationFormData = Omit<Location, 'id'>\n\n// Status options\nexport const employeeStatusOptions = [\n  { value: 'active', label: 'Active' },\n  { value: 'inactive', label: 'Inactive' },\n  { value: 'on-leave', label: 'On Leave' },\n] as const\n\nexport const departmentOptions = [\n  { value: 'engineering', label: 'Engineering' },\n  { value: 'marketing', label: 'Marketing' },\n  { value: 'sales', label: 'Sales' },\n  { value: 'hr', label: 'Human Resources' },\n  { value: 'finance', label: 'Finance' },\n  { value: 'operations', label: 'Operations' },\n] as const\n\nexport const locationSourceOptions = [\n  { value: 'gps', label: 'GPS' },\n  { value: 'manual', label: 'Manual' },\n  { value: 'wifi', label: 'WiFi' },\n] as const\n"],"names":[],"mappings":";;;;;;;AAAA;;AAGO,MAAM,iBAAiB,oKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,IAAI,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IACvB,YAAY,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC9B,UAAU,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,OAAO,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,OAAO,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI;IAC1B,YAAY,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC9B,UAAU,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,QAAQ,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC1B,UAAU,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,QAAQ,oKAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAU;QAAY;KAAW,EAAE,OAAO,CAAC;IAC3D,WAAW,oKAAA,CAAA,IAAC,CAAC,IAAI,GAAG,QAAQ;IAC5B,WAAW,oKAAA,CAAA,IAAC,CAAC,IAAI,GAAG,QAAQ;AAC9B;AAGO,MAAM,iBAAiB,oKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,IAAI,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IACvB,YAAY,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC9B,UAAU,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,IAAI;IACtC,WAAW,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,KAAK;IACzC,SAAS,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC5B,WAAW,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC7B,UAAU,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,QAAQ,oKAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAO;QAAU;KAAO,EAAE,OAAO,CAAC;AACpD;AAuBO,MAAM,wBAAwB;IACnC;QAAE,OAAO;QAAU,OAAO;IAAS;IACnC;QAAE,OAAO;QAAY,OAAO;IAAW;IACvC;QAAE,OAAO;QAAY,OAAO;IAAW;CACxC;AAEM,MAAM,oBAAoB;IAC/B;QAAE,OAAO;QAAe,OAAO;IAAc;IAC7C;QAAE,OAAO;QAAa,OAAO;IAAY;IACzC;QAAE,OAAO;QAAS,OAAO;IAAQ;IACjC;QAAE,OAAO;QAAM,OAAO;IAAkB;IACxC;QAAE,OAAO;QAAW,OAAO;IAAU;IACrC;QAAE,OAAO;QAAc,OAAO;IAAa;CAC5C;AAEM,MAAM,wBAAwB;IACnC;QAAE,OAAO;QAAO,OAAO;IAAM;IAC7B;QAAE,OAAO;QAAU,OAAO;IAAS;IACnC;QAAE,OAAO;QAAQ,OAAO;IAAO;CAChC","debugId":null}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/employees/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { employeeSchema, type Employee } from '@/lib/types'\n\n// In-memory storage for MVP (replace with database in production)\nlet employees: Employee[] = [\n  {\n    id: '1',\n    employeeId: 'EMP001',\n    fullName: 'John Doe',\n    email: 'john.doe@company.com',\n    phone: '+1234567890',\n    department: 'engineering',\n    position: 'Software Engineer',\n    salary: 75000,\n    joinDate: '2024-01-15',\n    status: 'active',\n    createdAt: new Date('2024-01-15'),\n    updatedAt: new Date('2024-01-15'),\n  },\n  {\n    id: '2',\n    employeeId: 'EMP002',\n    fullName: 'Jane Smith',\n    email: 'jane.smith@company.com',\n    phone: '+1234567891',\n    department: 'marketing',\n    position: 'Marketing Manager',\n    salary: 65000,\n    joinDate: '2024-02-01',\n    status: 'active',\n    createdAt: new Date('2024-02-01'),\n    updatedAt: new Date('2024-02-01'),\n  },\n]\n\nexport async function GET() {\n  try {\n    return NextResponse.json({\n      data: employees,\n      message: 'Employees retrieved successfully'\n    })\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to retrieve employees' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    \n    // Validate the request body\n    const validatedData = employeeSchema.parse({\n      ...body,\n      id: undefined, // Let the server generate the ID\n      createdAt: undefined,\n      updatedAt: undefined,\n    })\n\n    // Check if employee ID already exists\n    const existingEmployee = employees.find(emp => emp.employeeId === validatedData.employeeId)\n    if (existingEmployee) {\n      return NextResponse.json(\n        { error: 'Employee ID already exists' },\n        { status: 400 }\n      )\n    }\n\n    // Check if email already exists\n    const existingEmail = employees.find(emp => emp.email === validatedData.email)\n    if (existingEmail) {\n      return NextResponse.json(\n        { error: 'Email already exists' },\n        { status: 400 }\n      )\n    }\n\n    // Create new employee\n    const newEmployee: Employee = {\n      ...validatedData,\n      id: Date.now().toString(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }\n\n    employees.push(newEmployee)\n\n    return NextResponse.json({\n      data: newEmployee,\n      message: 'Employee created successfully'\n    }, { status: 201 })\n\n  } catch (error) {\n    if (error instanceof Error) {\n      return NextResponse.json(\n        { error: error.message },\n        { status: 400 }\n      )\n    }\n    \n    return NextResponse.json(\n      { error: 'Failed to create employee' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,kEAAkE;AAClE,IAAI,YAAwB;IAC1B;QACE,IAAI;QACJ,YAAY;QACZ,UAAU;QACV,OAAO;QACP,OAAO;QACP,YAAY;QACZ,UAAU;QACV,QAAQ;QACR,UAAU;QACV,QAAQ;QACR,WAAW,IAAI,KAAK;QACpB,WAAW,IAAI,KAAK;IACtB;IACA;QACE,IAAI;QACJ,YAAY;QACZ,UAAU;QACV,OAAO;QACP,OAAO;QACP,YAAY;QACZ,UAAU;QACV,QAAQ;QACR,UAAU;QACV,QAAQ;QACR,WAAW,IAAI,KAAK;QACpB,WAAW,IAAI,KAAK;IACtB;CACD;AAEM,eAAe;IACpB,IAAI;QACF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,MAAM;YACN,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA+B,GACxC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,4BAA4B;QAC5B,MAAM,gBAAgB,qHAAA,CAAA,iBAAc,CAAC,KAAK,CAAC;YACzC,GAAG,IAAI;YACP,IAAI;YACJ,WAAW;YACX,WAAW;QACb;QAEA,sCAAsC;QACtC,MAAM,mBAAmB,UAAU,IAAI,CAAC,CAAA,MAAO,IAAI,UAAU,KAAK,cAAc,UAAU;QAC1F,IAAI,kBAAkB;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA6B,GACtC;gBAAE,QAAQ;YAAI;QAElB;QAEA,gCAAgC;QAChC,MAAM,gBAAgB,UAAU,IAAI,CAAC,CAAA,MAAO,IAAI,KAAK,KAAK,cAAc,KAAK;QAC7E,IAAI,eAAe;YACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;QAEA,sBAAsB;QACtB,MAAM,cAAwB;YAC5B,GAAG,aAAa;YAChB,IAAI,KAAK,GAAG,GAAG,QAAQ;YACvB,WAAW,IAAI;YACf,WAAW,IAAI;QACjB;QAEA,UAAU,IAAI,CAAC;QAEf,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,MAAM;YACN,SAAS;QACX,GAAG;YAAE,QAAQ;QAAI;IAEnB,EAAE,OAAO,OAAO;QACd,IAAI,iBAAiB,OAAO;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,MAAM,OAAO;YAAC,GACvB;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4B,GACrC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}