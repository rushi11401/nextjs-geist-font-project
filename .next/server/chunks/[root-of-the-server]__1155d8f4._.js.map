{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/types.ts"],"sourcesContent":["import { z } from 'zod'\n\n// Employee Schema\nexport const employeeSchema = z.object({\n  id: z.string().optional(),\n  employeeId: z.string().min(1, \"Employee ID is required\"),\n  fullName: z.string().min(2, \"Full name must be at least 2 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().min(10, \"Phone number must be at least 10 digits\"),\n  department: z.string().min(1, \"Department is required\"),\n  position: z.string().min(1, \"Position is required\"),\n  salary: z.number().min(0, \"Salary must be a positive number\"),\n  joinDate: z.string().min(1, \"Join date is required\"),\n  status: z.enum(['active', 'inactive', 'on-leave']).default('active'),\n  createdAt: z.date().optional(),\n  updatedAt: z.date().optional(),\n})\n\n// Location Schema\nexport const locationSchema = z.object({\n  id: z.string().optional(),\n  employeeId: z.string().min(1, \"Employee ID is required\"),\n  latitude: z.number().min(-90).max(90, \"Invalid latitude\"),\n  longitude: z.number().min(-180).max(180, \"Invalid longitude\"),\n  address: z.string().optional(),\n  timestamp: z.string().min(1, \"Timestamp is required\"),\n  accuracy: z.number().min(0, \"Accuracy must be positive\"),\n  source: z.enum(['gps', 'manual', 'wifi']).default('gps'),\n})\n\n// TypeScript types\nexport type Employee = z.infer<typeof employeeSchema>\nexport type Location = z.infer<typeof locationSchema>\n\n// API Response types\nexport interface ApiResponse<T> {\n  data?: T\n  error?: string\n  message?: string\n}\n\nexport interface EmployeeWithLocation extends Employee {\n  currentLocation?: Location\n  locationHistory?: Location[]\n}\n\n// Form types\nexport type EmployeeFormData = Omit<Employee, 'id' | 'createdAt' | 'updatedAt'>\nexport type LocationFormData = Omit<Location, 'id'>\n\n// Status options\nexport const employeeStatusOptions = [\n  { value: 'active', label: 'Active' },\n  { value: 'inactive', label: 'Inactive' },\n  { value: 'on-leave', label: 'On Leave' },\n] as const\n\nexport const departmentOptions = [\n  { value: 'engineering', label: 'Engineering' },\n  { value: 'marketing', label: 'Marketing' },\n  { value: 'sales', label: 'Sales' },\n  { value: 'hr', label: 'Human Resources' },\n  { value: 'finance', label: 'Finance' },\n  { value: 'operations', label: 'Operations' },\n] as const\n\nexport const locationSourceOptions = [\n  { value: 'gps', label: 'GPS' },\n  { value: 'manual', label: 'Manual' },\n  { value: 'wifi', label: 'WiFi' },\n] as const\n"],"names":[],"mappings":";;;;;;;AAAA;;AAGO,MAAM,iBAAiB,oKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,IAAI,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IACvB,YAAY,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC9B,UAAU,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,OAAO,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,OAAO,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI;IAC1B,YAAY,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC9B,UAAU,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,QAAQ,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC1B,UAAU,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,QAAQ,oKAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAU;QAAY;KAAW,EAAE,OAAO,CAAC;IAC3D,WAAW,oKAAA,CAAA,IAAC,CAAC,IAAI,GAAG,QAAQ;IAC5B,WAAW,oKAAA,CAAA,IAAC,CAAC,IAAI,GAAG,QAAQ;AAC9B;AAGO,MAAM,iBAAiB,oKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,IAAI,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IACvB,YAAY,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC9B,UAAU,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,IAAI;IACtC,WAAW,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,KAAK;IACzC,SAAS,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC5B,WAAW,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC7B,UAAU,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,QAAQ,oKAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAO;QAAU;KAAO,EAAE,OAAO,CAAC;AACpD;AAuBO,MAAM,wBAAwB;IACnC;QAAE,OAAO;QAAU,OAAO;IAAS;IACnC;QAAE,OAAO;QAAY,OAAO;IAAW;IACvC;QAAE,OAAO;QAAY,OAAO;IAAW;CACxC;AAEM,MAAM,oBAAoB;IAC/B;QAAE,OAAO;QAAe,OAAO;IAAc;IAC7C;QAAE,OAAO;QAAa,OAAO;IAAY;IACzC;QAAE,OAAO;QAAS,OAAO;IAAQ;IACjC;QAAE,OAAO;QAAM,OAAO;IAAkB;IACxC;QAAE,OAAO;QAAW,OAAO;IAAU;IACrC;QAAE,OAAO;QAAc,OAAO;IAAa;CAC5C;AAEM,MAAM,wBAAwB;IACnC;QAAE,OAAO;QAAO,OAAO;IAAM;IAC7B;QAAE,OAAO;QAAU,OAAO;IAAS;IACnC;QAAE,OAAO;QAAQ,OAAO;IAAO;CAChC","debugId":null}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/locations/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { locationSchema, type Location } from '@/lib/types'\n\n// In-memory storage for MVP (replace with database in production)\nlet locations: Location[] = [\n  {\n    id: '1',\n    employeeId: '1',\n    latitude: 40.7128,\n    longitude: -74.0060,\n    address: 'New York, NY, USA',\n    timestamp: new Date().toISOString(),\n    accuracy: 10,\n    source: 'gps',\n  },\n  {\n    id: '2',\n    employeeId: '2',\n    latitude: 34.0522,\n    longitude: -118.2437,\n    address: 'Los Angeles, CA, USA',\n    timestamp: new Date().toISOString(),\n    accuracy: 15,\n    source: 'gps',\n  },\n]\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const employeeId = searchParams.get('employeeId')\n    const limit = searchParams.get('limit')\n    \n    let filteredLocations = locations\n    \n    // Filter by employee ID if provided\n    if (employeeId) {\n      filteredLocations = locations.filter(loc => loc.employeeId === employeeId)\n    }\n    \n    // Sort by timestamp (most recent first)\n    filteredLocations.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n    \n    // Limit results if specified\n    if (limit) {\n      const limitNum = parseInt(limit, 10)\n      if (!isNaN(limitNum) && limitNum > 0) {\n        filteredLocations = filteredLocations.slice(0, limitNum)\n      }\n    }\n\n    return NextResponse.json({\n      data: filteredLocations,\n      message: 'Locations retrieved successfully'\n    })\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to retrieve locations' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    \n    // Validate the request body\n    const validatedData = locationSchema.parse({\n      ...body,\n      id: undefined, // Let the server generate the ID\n    })\n\n    // Create new location record\n    const newLocation: Location = {\n      ...validatedData,\n      id: Date.now().toString(),\n    }\n\n    // Add reverse geocoding if address is not provided\n    if (!newLocation.address) {\n      try {\n        const address = await reverseGeocode(newLocation.latitude, newLocation.longitude)\n        newLocation.address = address\n      } catch (error) {\n        // If reverse geocoding fails, use coordinates as address\n        newLocation.address = `${newLocation.latitude.toFixed(6)}, ${newLocation.longitude.toFixed(6)}`\n      }\n    }\n\n    locations.push(newLocation)\n\n    return NextResponse.json({\n      data: newLocation,\n      message: 'Location recorded successfully'\n    }, { status: 201 })\n\n  } catch (error) {\n    if (error instanceof Error) {\n      return NextResponse.json(\n        { error: error.message },\n        { status: 400 }\n      )\n    }\n    \n    return NextResponse.json(\n      { error: 'Failed to record location' },\n      { status: 500 }\n    )\n  }\n}\n\n// Simple reverse geocoding function (in production, use a proper geocoding service)\nasync function reverseGeocode(lat: number, lng: number): Promise<string> {\n  try {\n    // This is a mock implementation - in production, use Google Maps API, OpenStreetMap, etc.\n    const response = await fetch(\n      `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lng}&localityLanguage=en`\n    )\n    \n    if (!response.ok) {\n      throw new Error('Geocoding service unavailable')\n    }\n    \n    const data = await response.json()\n    return data.display_name || data.locality || `${lat.toFixed(6)}, ${lng.toFixed(6)}`\n  } catch (error) {\n    // Fallback to coordinates\n    return `${lat.toFixed(6)}, ${lng.toFixed(6)}`\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,kEAAkE;AAClE,IAAI,YAAwB;IAC1B;QACE,IAAI;QACJ,YAAY;QACZ,UAAU;QACV,WAAW,CAAC;QACZ,SAAS;QACT,WAAW,IAAI,OAAO,WAAW;QACjC,UAAU;QACV,QAAQ;IACV;IACA;QACE,IAAI;QACJ,YAAY;QACZ,UAAU;QACV,WAAW,CAAC;QACZ,SAAS;QACT,WAAW,IAAI,OAAO,WAAW;QACjC,UAAU;QACV,QAAQ;IACV;CACD;AAEM,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,aAAa,aAAa,GAAG,CAAC;QACpC,MAAM,QAAQ,aAAa,GAAG,CAAC;QAE/B,IAAI,oBAAoB;QAExB,oCAAoC;QACpC,IAAI,YAAY;YACd,oBAAoB,UAAU,MAAM,CAAC,CAAA,MAAO,IAAI,UAAU,KAAK;QACjE;QAEA,wCAAwC;QACxC,kBAAkB,IAAI,CAAC,CAAC,GAAG,IAAM,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO,KAAK,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO;QAEhG,6BAA6B;QAC7B,IAAI,OAAO;YACT,MAAM,WAAW,SAAS,OAAO;YACjC,IAAI,CAAC,MAAM,aAAa,WAAW,GAAG;gBACpC,oBAAoB,kBAAkB,KAAK,CAAC,GAAG;YACjD;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,MAAM;YACN,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA+B,GACxC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,4BAA4B;QAC5B,MAAM,gBAAgB,qHAAA,CAAA,iBAAc,CAAC,KAAK,CAAC;YACzC,GAAG,IAAI;YACP,IAAI;QACN;QAEA,6BAA6B;QAC7B,MAAM,cAAwB;YAC5B,GAAG,aAAa;YAChB,IAAI,KAAK,GAAG,GAAG,QAAQ;QACzB;QAEA,mDAAmD;QACnD,IAAI,CAAC,YAAY,OAAO,EAAE;YACxB,IAAI;gBACF,MAAM,UAAU,MAAM,eAAe,YAAY,QAAQ,EAAE,YAAY,SAAS;gBAChF,YAAY,OAAO,GAAG;YACxB,EAAE,OAAO,OAAO;gBACd,yDAAyD;gBACzD,YAAY,OAAO,GAAG,GAAG,YAAY,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,YAAY,SAAS,CAAC,OAAO,CAAC,IAAI;YACjG;QACF;QAEA,UAAU,IAAI,CAAC;QAEf,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,MAAM;YACN,SAAS;QACX,GAAG;YAAE,QAAQ;QAAI;IAEnB,EAAE,OAAO,OAAO;QACd,IAAI,iBAAiB,OAAO;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,MAAM,OAAO;YAAC,GACvB;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4B,GACrC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEA,oFAAoF;AACpF,eAAe,eAAe,GAAW,EAAE,GAAW;IACpD,IAAI;QACF,0FAA0F;QAC1F,MAAM,WAAW,MAAM,MACrB,CAAC,kEAAkE,EAAE,IAAI,WAAW,EAAE,IAAI,oBAAoB,CAAC;QAGjH,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO,KAAK,YAAY,IAAI,KAAK,QAAQ,IAAI,GAAG,IAAI,OAAO,CAAC,GAAG,EAAE,EAAE,IAAI,OAAO,CAAC,IAAI;IACrF,EAAE,OAAO,OAAO;QACd,0BAA0B;QAC1B,OAAO,GAAG,IAAI,OAAO,CAAC,GAAG,EAAE,EAAE,IAAI,OAAO,CAAC,IAAI;IAC/C;AACF","debugId":null}}]
}