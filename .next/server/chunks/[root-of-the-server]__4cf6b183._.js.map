{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/locations/%5BemployeeId%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { type Location } from '@/lib/types'\n\n// In-memory storage (same as in locations/route.ts)\nlet locations: Location[] = [\n  {\n    id: '1',\n    employeeId: '1',\n    latitude: 40.7128,\n    longitude: -74.0060,\n    address: 'New York, NY, USA',\n    timestamp: new Date().toISOString(),\n    accuracy: 10,\n    source: 'gps',\n  },\n  {\n    id: '2',\n    employeeId: '2',\n    latitude: 34.0522,\n    longitude: -118.2437,\n    address: 'Los Angeles, CA, USA',\n    timestamp: new Date().toISOString(),\n    accuracy: 15,\n    source: 'gps',\n  },\n  {\n    id: '3',\n    employeeId: '1',\n    latitude: 40.7589,\n    longitude: -73.9851,\n    address: 'Times Square, New York, NY, USA',\n    timestamp: new Date(Date.now() - 3600000).toISOString(), // 1 hour ago\n    accuracy: 8,\n    source: 'gps',\n  },\n]\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { employeeId: string } }\n) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const limit = searchParams.get('limit')\n    const startDate = searchParams.get('startDate')\n    const endDate = searchParams.get('endDate')\n    \n    // Filter locations for the specific employee\n    let employeeLocations = locations.filter(loc => loc.employeeId === params.employeeId)\n    \n    // Filter by date range if provided\n    if (startDate) {\n      const start = new Date(startDate)\n      employeeLocations = employeeLocations.filter(loc => \n        new Date(loc.timestamp) >= start\n      )\n    }\n    \n    if (endDate) {\n      const end = new Date(endDate)\n      employeeLocations = employeeLocations.filter(loc => \n        new Date(loc.timestamp) <= end\n      )\n    }\n    \n    // Sort by timestamp (most recent first)\n    employeeLocations.sort((a, b) => \n      new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n    )\n    \n    // Limit results if specified\n    if (limit) {\n      const limitNum = parseInt(limit, 10)\n      if (!isNaN(limitNum) && limitNum > 0) {\n        employeeLocations = employeeLocations.slice(0, limitNum)\n      }\n    }\n\n    // Get current location (most recent)\n    const currentLocation = employeeLocations.length > 0 ? employeeLocations[0] : null\n\n    return NextResponse.json({\n      data: {\n        employeeId: params.employeeId,\n        currentLocation,\n        locationHistory: employeeLocations,\n        totalRecords: employeeLocations.length\n      },\n      message: 'Employee locations retrieved successfully'\n    })\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to retrieve employee locations' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: { employeeId: string } }\n) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const locationId = searchParams.get('locationId')\n    \n    if (locationId) {\n      // Delete specific location record\n      const locationIndex = locations.findIndex(loc => \n        loc.id === locationId && loc.employeeId === params.employeeId\n      )\n      \n      if (locationIndex === -1) {\n        return NextResponse.json(\n          { error: 'Location record not found' },\n          { status: 404 }\n        )\n      }\n      \n      const deletedLocation = locations[locationIndex]\n      locations.splice(locationIndex, 1)\n      \n      return NextResponse.json({\n        data: deletedLocation,\n        message: 'Location record deleted successfully'\n      })\n    } else {\n      // Delete all location records for the employee\n      const employeeLocations = locations.filter(loc => loc.employeeId === params.employeeId)\n      \n      if (employeeLocations.length === 0) {\n        return NextResponse.json(\n          { error: 'No location records found for this employee' },\n          { status: 404 }\n        )\n      }\n      \n      locations = locations.filter(loc => loc.employeeId !== params.employeeId)\n      \n      return NextResponse.json({\n        data: {\n          deletedCount: employeeLocations.length,\n          employeeId: params.employeeId\n        },\n        message: 'All location records deleted successfully'\n      })\n    }\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to delete location records' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;;AAGA,oDAAoD;AACpD,IAAI,YAAwB;IAC1B;QACE,IAAI;QACJ,YAAY;QACZ,UAAU;QACV,WAAW,CAAC;QACZ,SAAS;QACT,WAAW,IAAI,OAAO,WAAW;QACjC,UAAU;QACV,QAAQ;IACV;IACA;QACE,IAAI;QACJ,YAAY;QACZ,UAAU;QACV,WAAW,CAAC;QACZ,SAAS;QACT,WAAW,IAAI,OAAO,WAAW;QACjC,UAAU;QACV,QAAQ;IACV;IACA;QACE,IAAI;QACJ,YAAY;QACZ,UAAU;QACV,WAAW,CAAC;QACZ,SAAS;QACT,WAAW,IAAI,KAAK,KAAK,GAAG,KAAK,SAAS,WAAW;QACrD,UAAU;QACV,QAAQ;IACV;CACD;AAEM,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAAsC;IAE9C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,QAAQ,aAAa,GAAG,CAAC;QAC/B,MAAM,YAAY,aAAa,GAAG,CAAC;QACnC,MAAM,UAAU,aAAa,GAAG,CAAC;QAEjC,6CAA6C;QAC7C,IAAI,oBAAoB,UAAU,MAAM,CAAC,CAAA,MAAO,IAAI,UAAU,KAAK,OAAO,UAAU;QAEpF,mCAAmC;QACnC,IAAI,WAAW;YACb,MAAM,QAAQ,IAAI,KAAK;YACvB,oBAAoB,kBAAkB,MAAM,CAAC,CAAA,MAC3C,IAAI,KAAK,IAAI,SAAS,KAAK;QAE/B;QAEA,IAAI,SAAS;YACX,MAAM,MAAM,IAAI,KAAK;YACrB,oBAAoB,kBAAkB,MAAM,CAAC,CAAA,MAC3C,IAAI,KAAK,IAAI,SAAS,KAAK;QAE/B;QAEA,wCAAwC;QACxC,kBAAkB,IAAI,CAAC,CAAC,GAAG,IACzB,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO,KAAK,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO;QAGjE,6BAA6B;QAC7B,IAAI,OAAO;YACT,MAAM,WAAW,SAAS,OAAO;YACjC,IAAI,CAAC,MAAM,aAAa,WAAW,GAAG;gBACpC,oBAAoB,kBAAkB,KAAK,CAAC,GAAG;YACjD;QACF;QAEA,qCAAqC;QACrC,MAAM,kBAAkB,kBAAkB,MAAM,GAAG,IAAI,iBAAiB,CAAC,EAAE,GAAG;QAE9E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,MAAM;gBACJ,YAAY,OAAO,UAAU;gBAC7B;gBACA,iBAAiB;gBACjB,cAAc,kBAAkB,MAAM;YACxC;YACA,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwC,GACjD;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,OACpB,OAAoB,EACpB,EAAE,MAAM,EAAsC;IAE9C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,aAAa,aAAa,GAAG,CAAC;QAEpC,IAAI,YAAY;YACd,kCAAkC;YAClC,MAAM,gBAAgB,UAAU,SAAS,CAAC,CAAA,MACxC,IAAI,EAAE,KAAK,cAAc,IAAI,UAAU,KAAK,OAAO,UAAU;YAG/D,IAAI,kBAAkB,CAAC,GAAG;gBACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;oBAAE,OAAO;gBAA4B,GACrC;oBAAE,QAAQ;gBAAI;YAElB;YAEA,MAAM,kBAAkB,SAAS,CAAC,cAAc;YAChD,UAAU,MAAM,CAAC,eAAe;YAEhC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,MAAM;gBACN,SAAS;YACX;QACF,OAAO;YACL,+CAA+C;YAC/C,MAAM,oBAAoB,UAAU,MAAM,CAAC,CAAA,MAAO,IAAI,UAAU,KAAK,OAAO,UAAU;YAEtF,IAAI,kBAAkB,MAAM,KAAK,GAAG;gBAClC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;oBAAE,OAAO;gBAA8C,GACvD;oBAAE,QAAQ;gBAAI;YAElB;YAEA,YAAY,UAAU,MAAM,CAAC,CAAA,MAAO,IAAI,UAAU,KAAK,OAAO,UAAU;YAExE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,MAAM;oBACJ,cAAc,kBAAkB,MAAM;oBACtC,YAAY,OAAO,UAAU;gBAC/B;gBACA,SAAS;YACX;QACF;IACF,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAoC,GAC7C;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}